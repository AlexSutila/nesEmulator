#!/usr/bin/env python3

from PIL import Image

'''
----- Layout -------

Background:

0x3F00, 0x3F01, 0x3F02, 0x3F03
0x3F04, 0x3F05, 0x3F06, 0x3F07
0x3F08, 0x3F09, 0x3F0A, 0x3F0B
0x3F0C, 0x3F0D, 0x3F0E, 0x3F0F

Sprites:

0x3F10, 0x3F11, 0x3F12, 0x3F13
0x3F14, 0x3F15, 0x3F16, 0x3F17
0x3F18, 0x3F19, 0x3F1A, 0x3F1B
0x3F1C, 0x3F1D, 0x3F1E, 0x3F1F

Note that this display does take
the mirroring of 0x3F00 to all 
locations where addr % 4 == 0

'''

pal = [
     # A copy paste and rearrangement from my c++ source code
    [0x75,0x75,0x75],[0x27,0x1B,0x8F],[0x00,0x00,0xAB],[0x47,0x00,0x9F],
    [0x8F,0x00,0x77],[0xAB,0x00,0x13],[0xA7,0x00,0x00],[0x7F,0x0B,0x00],
    [0x43,0x2F,0x00],[0x00,0x47,0x00],[0x00,0x51,0x00],[0x00,0x3F,0x17],
    [0x1B,0x3F,0x5F],[0x00,0x00,0x00],[0x00,0x00,0x00],[0x00,0x00,0x00],
    [0xBC,0xBC,0xBC],[0x00,0x73,0xEF],[0x23,0x3B,0xEF],[0x83,0x00,0xF3],
    [0xBF,0x00,0xBF],[0xE7,0x00,0x5B],[0xDB,0x2B,0x00],[0xCB,0x4F,0x0F],
    [0x8B,0x73,0x00],[0x00,0x97,0x00],[0x00,0xAB,0x00],[0x00,0x93,0x3B],
    [0x00,0x83,0x8B],[0x00,0x00,0x00],[0x00,0x00,0x00],[0x00,0x00,0x00],
    [0xFF,0xFF,0xFF],[0x3F,0xBF,0xFF],[0x5F,0x97,0xFF],[0xA7,0x8B,0xFD],
    [0xF7,0x7B,0xFF],[0xFF,0x77,0xB7],[0xFF,0x77,0x63],[0xFF,0x9B,0x3B],
    [0xF3,0xBF,0x3F],[0x83,0xD3,0x13],[0x4F,0xDF,0x4B],[0x58,0xF8,0x98],
    [0x00,0xEB,0xDB],[0x00,0x00,0x00],[0x00,0x00,0x00],[0x00,0x00,0x00],
    [0xFF,0xFF,0xFF],[0xAB,0xE7,0xFF],[0xC7,0xD7,0xFF],[0xD7,0xCB,0xFF],
    [0xFF,0xC7,0xFF],[0xFF,0xC7,0xDB],[0xFF,0xBF,0xB3],[0xFF,0xDB,0xAB],
    [0xFF,0xE7,0xA3],[0xE3,0xFF,0xA3],[0xAB,0xF3,0xBF],[0xB3,0xFF,0xCF],
    [0x9F,0xFF,0xF3],[0x00,0x00,0x00],[0x00,0x00,0x00],[0x00,0x00,0x00],
]

def readData():

     arr = []; palBase = 0x3F00
     # Based on the c++ source code, this is the expected location of the dump
     with open("dumps/ppubusdump.txt", "rb") as dump:
          dump.seek(palBase, 0)
          for i in range(0x20):
               arr.append(dump.read(1))
     return arr

def main():

     numRows = 0x4; numCols = 0x8 # There are 0x20 palette indices in total
     upscaleFactor = 1000
     
     arr = readData() # Read palette data into an array
     img = Image.new('RGB', (numRows, numCols))
     
     for c in range(numCols): 
          for r in range(numRows):
               _r,_g,_b = pal[int.from_bytes(arr[(c * numRows) + r], 'little')]
               img.putpixel((r,c), (_r,_g,_b))

     # I'm aware my rows vs cols logic is kinda convoluted, it works so what ever
     #    this is just a utility script to verify things
     img.resize((numRows * upscaleFactor, numCols * upscaleFactor),resample=Image.NEAREST).show()

if __name__ == "__main__": main()
